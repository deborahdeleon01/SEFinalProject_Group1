<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Course>
	<Divide>Databases</Divide>
	<Department>Computer Science</Department>
	<Prefix>CSCI</Prefix>
	<Number>4335</Number>
	<Name>Computer Architecture</Name>
	<Description>
  A study of the operational units and their interconnections of a modern computer as well as the theory behind the design of the
		instruction set, control unit, registers, memory hierarchy and addressing modes, bus structures, input/output, and
		storage units. Similarities between CISC and RISC architectures and related issues such as instruction level parallelism
		and superscalar processors are discussed.
	</Description>
        <Credit-hours>3.000 Credit Hours</Credit-hours>
	<Lecture-hours>3.000 Lecture Hours</Lecture-hours>
	<Lab-hours>0.000 Lecture hours</Lab-hours>
	<Level>Undergraduate</Level>
	<Schedule-type>Lecture</Schedule-type>
	<Prerequisite>
		None
	</Prerequisite>
	<Co-requisite>
		None
	</Co-requisite>
	<Legacy-number>None</Legacy-number>
	<Cross-listed>None</Cross-listed>
	<Restrictions>
		None
	</Restrictions>
	<Course-attributes>
		Degree Elective,
		CS Instruction Fee - HU
	</Course-attributes>
	<ABET-outcomes>
	  (a) An ability to apply knowledge of computing and mathematics appropriate to
	  the program's student outcomes and to the discipline.
	  (b) An ability to analyze a problem, and identify and define the computing
	  requirements appropriate to its solution.
	  (c) An Ability to design, implement, and evaluate a computer-based system, process,
	  component, or program to meet desired needs.
	  (h) Recognition of the need for and an ability to engage in continuing professional
	  development
	  (i) An ability to use current techniques, skills, and tools necesary for computing
	  practice.
	  (j) An ability to apply mathematical foundations, algorithmic principles, and computer
	  science theory in the modeling and design of computer-based systems in a way that demonstrates
	  comprehension of the tradeoffs involved in design choices.
	  (k) An ability to apply design and development principles in the construction of
	  software systems of varifying complexity.
	</ABET-outcomes>

	<Learning-outcomes>
	    Describe the progression of computer architecture from vacuum tubes to VLSI.
	    Demonstrate an understanding of the basic building blocks and their role in the historical development of computer architecture.
	    Describe the machine level representation of data.
	    Demonstrate an understanding of the assembly level machine organization.
	    Explain the organization of the classical von Neumann machine and its major functional units.
	    Explain the basic concepts of interrupts and I/O operations.
	    Describe the memory system organization and architecture.
	    Demonstrate an understanding of how the various components are connected and how they communicate with each other.
	    Describe the functional organization of computer (datapaths, signals, pipelining).
	   Describe multiprocessing and alternative architecture.
	</Learning-outcomes>
</Course>
