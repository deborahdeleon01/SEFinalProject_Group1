<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Course>
<Divide>Computer Science Core</Divide>
<Department>Computer Science</Department>
<Prefix>CSCI</Prefix>
<Number>2380</Number>
<Name>Computer Science II</Name>
<Description> A second programming course includes problem solving by structured design; provides an introduction to elementary data structures, including linked lists, stacks, queues, trees and graphs, and advanced programming techniques, including recursion, sorting and searching.</Description>
<Credit-hours>3.000 Credit hours</Credit-hours>
<Lecture-hours>3.000 Lecture hours</Lecture-hours>
<Lab-hours>0.000 Lab hours</Lab-hours>
<Level>Undergraduate</Level>
<Schedule-type>Lecture</Schedule-type>
<Prerequisite>
  CSCI-1370/CMPE-1370 or CSCI-1378/CMPE-1378 or consent of instructor
 </Prerequisite>
<Co-requisite>None</Co-requisite>
<Legacy-number>COSC-2336</Legacy-number>
<Cross-listed>CMPE-2380</Cross-listed>
	<Restrictions>
  dnu-MED in Educational Admin,
  MPA in Public Administration,
  Bus. Admin -Accelerated online,
  May not be enrolled in English Language Institute
	</Restrictions>
<Course-attributes>
	Degree Elective
	CS Instruction Fee - LU
</Course-attributes>
<ABET-outcomes>
  (a) An ability to apply knowledge of computing and mathematics appropriate to
  the program's student outcomes and to the discipline.
  (b) An ability to analyze a problem, and identify and define the computing
  requirements appropriate to its solution.
  (c) An Ability to design, implement, and evaluate a computer-based system, process,
  component, or program to meet desired needs.
  (i) An ability to use current techniques, skills, and tools necesary for computing
  practice.
  (j) An ability to apply mathematical foundations, algorithmic principles, and computer
  science theory in the modeling and design of computer-based systems in a way that demonstrates
  comprehension of the tradeoffs involved in design choices.
  (k) An ability to apply design and development principles in the construction of
  software systems of varifying complexity.
</ABET-outcomes>
<Learning-outcomes>
	1. To gain the understanding of principles of Object Oriented Programming: classes, methods, composition, inheritance, overloading, templates, virtual methods and polymorphism.
	2. To practice more about pointers, dynamic memory management.
	3. To know the concept of recursion.
	4. To be able to continue the development of problem solving skills in a context that emphasizes a structured, top-down approach.
	5. To demonstrate the application of software engineering principles in designing, coding and testing large programs.
	6. To understand essential data structures such as linked lists, stacks, and queues, and the specification of each of above structures as an abstract data type (ADT).
	7. To explore a systematic approach to the study of algorithms that focuses first on the understanding of the algorithm and then on analyzing the algorithm from a time/space perspective. In particular searching, sorting, and recursive algorithms are covered in the course.
	8. To learn how to evaluate the time and space tradeoffs in the design and implementation of ADT's.
	9. To be aware of the importance of object-oriented methods in developing software, particularly in the design and implementation of ADT's.
</Learning-outcomes>

</Course>
