<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Course>
   <Divide>Computer Science Core</Divide>
  <Department>Computer Science</Department>
  <Prefix>CSCI</Prefix>
  <Number>3334</Number>
  <Name>Systems Programming</Name>
  <Description>
    This course covers the design and implementation of system software. It investigates the relationship between software
    design and machine architecture. Topics may include assemblers, macro-processors, compilers, loaders, debugging environments,
    program development and archival tools, command language interpreters (shells), file systems, I/O support, processes, threads,
    and inter-process communication.
  </Description>
  <Credit-hours>3.000 Credit hours</Credit-hours>
  <Lecture-hours>3.000 Lecture hours</Lecture-hours>
  <Lab-hours>0.000 Lab hours</Lab-hours>
  <Level>Undergraduate</Level>
  <Schedule-type>Lecture</Schedule-type>
  <Prerequisite>CSCI/CMPE 2380</Prerequisite>
  <Co-requisite>CSCI/CMPE 2333, ELEE 3435, or CMPE 3437</Co-requisite>
  <Legacy-number>None</Legacy-number>
  <Cross-listed>None</Cross-listed>
	<Restrictions>None</Restrictions>
  <Course-attributes>
	   Degree Elective, CS Instruction Fee - HU
  </Course-attributes>
  <ABET-outcomes>
    (a) An ability to apply knowledge of computing and mathematics appropriate to
    the program's student outcomes and to the discipline.
    (b) An ability to analyze a problem, and identify and define the computing
    requirements appropriate to its solution.
    (c) An Ability to design, implement, and evaluate a computer-based system, process,
    component, or program to meet desired needs.
    (i) An ability to use current techniques, skills, and tools necesary for computing
    practice.
    (j) An ability to apply mathematical foundations, algorithmic principles, and computer
    science theory in the modeling and design of computer-based systems in a way that demonstrates
    comprehension of the tradeoffs involved in design choices.
    (k) An ability to apply design and development principles in the construction of
    software systems of varifying complexity.
  </ABET-outcomes>
  <Learning-outcomes>
  	1. Describe systems programs
  	2. Describe the evolution of systems programs
  	3. Read a line of input and separate it
  	4. Describe the functions of an assembler
  	5. Describe the functions of a linking loader
  	6. Describe the functions of a compiler
  	7. Understand and Run programs in the Linux environment
  </Learning-outcomes>

</Course>
